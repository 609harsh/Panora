generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model api_keys {
  id_api_key   BigInt   @id(map: "id_") @default(autoincrement())
  api_key_hash String   @unique(map: "unique_api_keys")
  id_user      Int
  id_project   BigInt
  projects     projects @relation(fields: [id_project], references: [id_project], onDelete: NoAction, onUpdate: NoAction, map: "fk_7")
  users        users    @relation(fields: [id_user], references: [id_user], onDelete: NoAction, onUpdate: NoAction, map: "fk_8")

  @@index([id_user], map: "fk_2")
  @@index([id_project], map: "fk_api_keys_projects")
}

model crm_contact_email_addresses {
  id_crm_contact_email Int          @id(map: "pk_crm_contact_email_addresses") @default(autoincrement())
  email_address        String
  email_address_type   String
  id_crm_contact       Int          @default(autoincrement())
  crm_contacts         crm_contacts @relation(fields: [id_crm_contact], references: [id_crm_contact], onDelete: NoAction, onUpdate: NoAction, map: "fk_3")

  @@index([id_crm_contact], map: "crm_contactid_crm_contact_email_address")
}

model crm_contacts {
  id_crm_contact              Int                           @id(map: "pk_crm_contacts") @default(autoincrement())
  first_name                  String
  last_name                   String
  id_job                      Int                           @default(autoincrement())
  crm_contact_email_addresses crm_contact_email_addresses[]
  jobs                        jobs                          @relation(fields: [id_job], references: [id_job], onDelete: NoAction, onUpdate: NoAction, map: "job_id_crm_contact")
  crm_contacts_phone_numbers  crm_contacts_phone_numbers[]

  @@index([id_job], map: "crm_contact_id_job")
}

model crm_contacts_phone_numbers {
  id_crm_contacts_phone_number Int          @id(map: "pk_crm_contacts_phone_numbers") @default(autoincrement())
  phone_number                 String
  phone_type                   String
  id_crm_contact               Int          @default(autoincrement())
  crm_contacts                 crm_contacts @relation(fields: [id_crm_contact], references: [id_crm_contact], onDelete: NoAction, onUpdate: NoAction, map: "fk_2")

  @@index([id_crm_contact], map: "crm_contactid_crm_contact_phone_number")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model jobs {
  id_job              Int                   @id(map: "pk_jobs") @default(autoincrement())
  status              String
  timestamp           DateTime              @default(now()) @db.Timestamp(6)
  id_linked_user      BigInt
  crm_contacts        crm_contacts[]
  linked_users        linked_users          @relation(fields: [id_linked_user], references: [id_linked_user], onDelete: NoAction, onUpdate: NoAction, map: "fk_12")
  jobs_status_history jobs_status_history[]

  @@index([id_linked_user], map: "fk_linkeduserid_projectid")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model jobs_status_history {
  id_jobs_status_history Int      @id(map: "pk_1") @default(autoincrement())
  timestamp              DateTime @default(now()) @db.Timestamp(6)
  previous_status        String
  new_status             String
  id_job                 Int      @default(autoincrement())
  jobs                   jobs     @relation(fields: [id_job], references: [id_job], onDelete: NoAction, onUpdate: NoAction, map: "fk_4")

  @@index([id_job], map: "id_job_jobs_status_history")
}

model organizations {
  id_organization    BigInt     @id(map: "pk_organizations") @default(autoincrement())
  name               String
  stripe_customer_id String
  projects           projects[]
  users              users[]
}

model projects {
  id_project      BigInt         @id(map: "pk_projects") @default(autoincrement())
  name            String
  id_organization BigInt
  api_keys        api_keys[]
  connections     connections[]
  linked_users    linked_users[]
  organizations   organizations  @relation(fields: [id_organization], references: [id_organization], onDelete: NoAction, onUpdate: NoAction, map: "fk_6")

  @@index([id_organization], map: "fk_1_projects")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model users {
  id_user         Int            @id(map: "pk_users") @default(autoincrement())
  email           String
  password_hash   String
  first_name      String
  last_name       String
  created_at      DateTime       @default(now()) @db.Timestamp(6)
  modified_at     DateTime       @default(now()) @db.Timestamp(6)
  id_organization BigInt?
  api_keys        api_keys[]
  organizations   organizations? @relation(fields: [id_organization], references: [id_organization], onDelete: NoAction, onUpdate: NoAction, map: "fk_5")

  @@index([id_organization], map: "fk_1_users")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model connections {
  id_connection        BigInt       @id(map: "pk_connections") @default(autoincrement())
  provider_slug        String
  account_url          String?
  token_type           String
  access_token         String?
  refresh_token        String?
  expiration_timestamp DateTime?    @db.Timestamp(6)
  created_at           DateTime     @db.Timestamp(6)
  id_project           BigInt
  id_linked_user       BigInt
  linked_users         linked_users @relation(fields: [id_linked_user], references: [id_linked_user], onDelete: NoAction, onUpdate: NoAction, map: "fk_11")
  projects             projects     @relation(fields: [id_project], references: [id_project], onDelete: NoAction, onUpdate: NoAction, map: "fk_9")

  @@unique([access_token, refresh_token], map: "index_3")
  @@index([id_project], map: "fk_1")
  @@index([id_linked_user], map: "fk_connections_to_linkedusersid")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model linked_users {
  id_linked_user        BigInt        @id(map: "key_id_linked_users") @default(autoincrement())
  linked_user_origin_id String
  alias                 String
  status                String
  id_project            BigInt
  connections           connections[]
  jobs                  jobs[]
  projects              projects      @relation(fields: [id_project], references: [id_project], onDelete: NoAction, onUpdate: NoAction, map: "fk_10")

  @@index([id_project], map: "fk_proectid_linked_users")
}
